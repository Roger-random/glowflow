//////////////////////////////////////////////////////////////////////////////
//
// Accelerometer Tilt 3D
//
// A Pixelblaze pattern to illuminate half of a 3D mapped volume based on value of
// accelerometer on the Pixelblaze sensor expansion board. Renders illusion of a
// half-full container of glowing fluid that flows to the bottom.
//
// Requires:
// * Pixelblaze with sensor expansion board
// * Pixel Mapper filled in with 3D (X,Y,Z) coordinates of LED pixels
//
// Use for other accelerometer-reactive Pixelblaze projects:
// * In beforeRender(), modify accelerometer readings so that its X,Y,Z values
//   are aligned with X,Y,Z axis of LEDs in Pixel Mapper
// * At the end of render3D(), use the accelerometer-transformed X/Y/Z values
//   in tx3D[] array to set color as desired
//
// Roger Cheng 2019
// https://newscrewdriver.com
// Github: Roger-random / Twitter: @Regorlas

// Accelerometer value will be filled in by Pixelblaze when sensor board is present
export var accelerometer

// How far the accelerometer vector has tilted relative to +Z axis in spherical coordinates.
// 0 = vector is pointing up, aligned with +Z
// PI = vector is pointing down, aligned with -Z
var accelPolar

// Which direction the accelerometer vector is tilted in spherical coordinates
// 0 = vector is aligned with +X
// PI/2 = vector is aligned with +Y
// -PI/2 = vector is aligned with -Y
var accelAzimuth

// Matrix for transform calculations
var m = array(16)

// Coordinate for matrix transform calculations
var tx3D = array(4)

// Before rendering each frame, take an accelerometer reading and convert to spherical coordinates
// https://en.wikipedia.org/wiki/List_of_common_coordinate_transformations#From_Cartesian_coordinates_2
export function beforeRender(delta) {
  // Take snapshot of accelerometer
  a = accelerometer

  // Adjust axis to fit mechanical chassis
  a[0] = -a[0] // X axis is mounted reversed

  // Calculate polar angle
  if (a[2] == 0) {
    // Z = 0 means acceleration vector is somewhere on XY plane.
    // Hard code answer is faster and avoids divide by zero.
    accelPolar = PI/2
  } else if (a[2] > 0) {
    // +Z = between 0 and PI/2
    accelPolar = atan(sqrt(pow(a[0],2)+pow(a[1],2))/a[2])
  } else {
    // -Z = between PI/2 and PI
    accelPolar = PI-atan(sqrt(pow(a[0],2)+pow(a[1],2))/-a[2])
  }

  // Calculate azimuth angle
  if (a[0] == 0) {
    // X of zero means acceleration vector is aligned with Y axis one way or another.
    // Hard code answer is faster and avoids divide by zero
    if (a[1] >= 0) {
      // Aligned with +Y axis
      accelAzimuth = PI/2
    } else {
      // Aligned with -Y axis
      accelAzimuth = -PI/2
    }
  } else if (a[0] > 0) {
    // +X = somewhere between -PI/2 and PI/2
    accelAzimuth = atan(a[1]/a[0])
  } else {
    // -X = somewhere between PI and PI/2 for +Y, between -PI and -PI/2 for -Y
    accelAzimuth = PI-atan(a[1]/-a[0])
  }

  // Set transform matrix to identity
  setIdentity()
}

// 3D transform matrix math adapted from
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web
function setIdentity() {
  m[0]  = 1;  m[1]  = 0;  m[2]  = 0;  m[3]  = 0
  m[4]  = 0;  m[5]  = 1;  m[6]  = 0;  m[7]  = 0
  m[8]  = 0;  m[9]  = 0;  m[10] = 1;  m[11] = 0
  m[12] = 0;  m[13] = 0;  m[14] = 0;  m[15] = 1
}

function setRotateYAxis(angle) {
  /* General form
  m[0]=cos(angle); m[1]  = 0;  m[2]=sin(angle); m[3]  = 0
  m[4]  = 0;       m[5]  = 1;  m[6]  = 0;       m[7]  = 0
  m[8]=-sin(angle);m[9]  = 0;  m[10]=cos(angle);m[11] = 0
  m[12] = 0;       m[13] = 0;  m[14] = 0;       m[15] = 1
  */

  // Optimized by removing terms that don't change for this program
  m[0]=cos(angle); m[1]  = 0;  m[2]=sin(angle)
  m[4]  = 0;       m[5]  = 1
  m[8]=-sin(angle);            m[10]=cos(angle)
}

function setRotateZAxis(angle) {
  /* General form
  m[0]=cos(angle);m[1]=-sin(angle);m[2]  = 0;  m[3]  = 0
  m[4]=sin(angle);m[5]=cos(angle); m[6]  = 0;  m[7]  = 0
  m[8]  = 0;      m[9]  = 0;       m[10] = 1;  m[11] = 0
  m[12] = 0;      m[13] = 0;       m[14] = 0;  m[15] = 1
  */

  // Optimized by removing terms that don't change for this program
  m[0]=cos(angle);m[1]=-sin(angle);m[2]  = 0
  m[4]=sin(angle);m[5]=cos(angle)
  m[8]  = 0;                       m[10] = 1
}

function matrixMultiply() {
  // Make a copy of point coordinates
  var x = tx3D[0];
  var y = tx3D[1];
  var z = tx3D[2];
  var w = tx3D[3];

  /* general form
  tx3D[0] = (x * m[ 0]) + (y * m[ 4]) + (z * m[ 8]) + (w * m[12]);
  tx3D[1] = (x * m[ 1]) + (y * m[ 5]) + (z * m[ 9]) + (w * m[13]);
  tx3D[2] = (x * m[ 2]) + (y * m[ 6]) + (z * m[10]) + (w * m[14]);
  tx3D[3] = (x * m[ 3]) + (y * m[ 7]) + (z * m[11]) + (w * m[15]);
  */

  // Optimized by removing terms that don't change for this program
  tx3D[0] = (x * m[ 0]) + (y * m[ 4]) + (z * m[ 8])              ;
  tx3D[1] = (x * m[ 1]) + (y * m[ 5])                            ;
  tx3D[2] = (x * m[ 2])               + (z * m[10])              ;
  tx3D[3] =                                            w         ;
}

export function render3D(index,x,y,z) {
  // x,y,z are in range from 0 to 1. Upscale them to range -1 to 1.
  // This moves (0,0,0) to the center of the volume.
  tx3D[0] = x*2.0-1.0
  tx3D[1] = y*2.0-1.0
  tx3D[2] = z*2.0-1.0
  tx3D[3] = 1

  setRotateZAxis(accelAzimuth)
  matrixMultiply()

  setRotateYAxis(accelPolar)
  matrixMultiply()

  // Rendering based on Z axis in transformed space
  if (tx3D[2] > 0) {
    hsv(0,0,1)
  }
}
